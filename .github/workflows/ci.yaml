name: random-CI

on:
  push:
    branches: [ "master", "release/**" ]
  pull_request:
    branches: [ "**" ]

defaults: { run: { shell: bash } }

# Cancel running actions when a new action on the same PR is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-cabal:
    name: CI-cabal
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
           # haskell-actions/setup is having trouble installing from hvr/ppa for ghc-8.0 and 8.2
          # - { os: ubuntu-latest,  ghc: "8.0.2"  }
          # - { os: ubuntu-latest,  ghc: "8.2.2"  }
          - { os: ubuntu-latest,  ghc: "8.4.4"  }
          - { os: ubuntu-latest,  ghc: "8.6.5"  }
          - { os: ubuntu-latest,  ghc: "8.8.4"  }
          - { os: ubuntu-latest,  ghc: "8.10.7" }
          - { os: ubuntu-latest,  ghc: "9.0.2"  }
          - { os: ubuntu-latest,  ghc: "9.2.8"  }
          - { os: ubuntu-latest,  ghc: "9.4.8"  }
          - { os: ubuntu-latest,  ghc: "9.6.6"  }
          - { os: ubuntu-latest,  ghc: "9.8.2"  }
          - { os: ubuntu-latest,  ghc: "9.10.1"  }
          # MacOS
          # - { os: macOS-latest,  ghc: "8.0.2"  }
          # - { os: macOS-latest,  ghc: "8.2.2"  }
          - { os: macOS-latest,  ghc: "8.4.4"  }
          - { os: macOS-latest,  ghc: "8.6.5"  }
          - { os: macOS-latest,  ghc: "8.8.4"  }
          - { os: macOS-latest,  ghc: "8.10.7" }
          - { os: macOS-latest,  ghc: "9.0.2"  }
          - { os: macOS-latest,  ghc: "9.2.8"  }
          - { os: macOS-latest,  ghc: "9.4.8"  }
          - { os: macOS-latest,  ghc: "9.6.6"  }
          - { os: macOS-latest,  ghc: "9.8.2"  }
          - { os: macOS-latest,  ghc: "9.10.1"  }
          # Windows
          # - { os: windows-latest,  ghc: "8.0.2"  }
          # - { os: windows-latest,  ghc: "8.2.2"  }
          - { os: windows-latest,  ghc: "8.4.4"  }
          - { os: windows-latest,  ghc: "8.6.5"  }
          - { os: windows-latest,  ghc: "8.8.4"  }
          - { os: windows-latest,  ghc: "8.10.7" }
          - { os: windows-latest,  ghc: "9.0.2"  }
          - { os: windows-latest,  ghc: "9.2.8"  }
          - { os: windows-latest,  ghc: "9.4.8"  }
          - { os: windows-latest,  ghc: "9.6.6"  }
          - { os: windows-latest,  ghc: "9.8.2"  }
          - { os: windows-latest,  ghc: "9.10.1"  }
    steps:
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}

    - name: Update cabal package database
      run: cabal update

    - uses: actions/cache@v4
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}

    - name: Build and test
      run: |
        cabal sdist -z -o .
        cabal get random-*.tar.gz
        cd random-*/
        echo $EXTRA_FLAGS
        cabal $EXTRA_FLAGS configure --haddock-all --enable-tests --enable-benchmarks --benchmark-option=-l
        cabal $EXTRA_FLAGS build all --write-ghc-environment-files=always

    - name: Doctest
      run: |
        cabal install doctest --ignore-project --overwrite-policy=always
        cabal repl --build-depends=unliftio --with-compiler=doctest --repl-options='-w -Wdefault'

  build-stack:
    name: CI-stack
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        resolver: [nightly, lts-22, lts-21, lts-20, lts-19, lts-18, lts-16, lts-14, lts-12, lts-11, lts-9]
        include:
          - resolver: lts-9
            stack-yaml: stack-custom.yaml
          - resolver: lts-11
            stack-yaml: stack-custom.yaml
          - resolver: lts-12
            ghc: '8.4.4'
            stack-yaml: stack-old.yaml
          - resolver: lts-14
            ghc: '8.6.5'
            stack-yaml: stack-old.yaml
          - resolver: lts-16
            ghc: '8.8.4'
            stack-yaml: stack-old.yaml
          - resolver: lts-18
            ghc: '8.10.7'
            stack-yaml: stack.lts-18.yaml
          - resolver: lts-19
            ghc: '9.0.2'
            stack-yaml: stack-coveralls.yaml
          - resolver: lts-20
            ghc: '9.2.8'
            stack-yaml: stack.yaml
          - resolver: lts-21
            ghc: '9.4.8'
            stack-yaml: stack.yaml
          - resolver: lts-22
            ghc: '9.6.6'
            stack-yaml: stack.yaml
          - resolver: nightly
            stack-yaml: stack.yaml
          # MacOS-latest
          - resolver: lts-20
            os: macos-13
            ghc: '9.2.8'
            stack-yaml: stack.yaml
          - resolver: lts-21
            os: macos-13
            ghc: '9.4.8'
            stack-yaml: stack.yaml
          - resolver: lts-22
            os: macos-13
            ghc: '9.6.6'
            stack-yaml: stack.yaml
          # Windows-latest
          - resolver: lts-14
            os: windows-latest
            ghc: '8.6.5'
            stack-yaml: stack-old.yaml
          - resolver: lts-20
            os: windows-latest
            ghc: '9.2.8'
            stack-yaml: stack.yaml
          - resolver: lts-21
            os: windows-latest
            ghc: '9.4.8'
            stack-yaml: stack.yaml
          - resolver: lts-22
            os: windows-latest
            ghc: '9.6.6'
            stack-yaml: stack.yaml
    env:
      STACK_YAML: '${{ matrix.stack-yaml }}'
      STACK_ARGS: '--resolver ${{ matrix.resolver }}'
      cache-version: v5 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: setup-haskell-stack
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        enable-stack: true
        stack-version: ${{ (matrix.resolver == 'lts-9' || matrix.resolver == 'lts-11') && '2.15.5' || 'latest' }}

    - name: Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack
          .stack-work
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}

    - name: Windows Cache
      id: cache-windows
      uses: actions/cache@v4
      if: matrix.os == 'windows-latest'
      with:
        path: |
          C:\\Users\\RUNNER~1\\AppData\\Local\\Programs\\stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}

    - name: Reset modtime
      run: |
        set -ex
        curl -sSL https://raw.githubusercontent.com/lehins/utils/master/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        runhaskell -- git-modtime.hs -f .stack-work/tree-contents.txt

    - name: Build
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-19" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          # Inspection tests aren't compatible with coverage
          stack $STACK_ARGS build :spec :legacy-test --coverage --test --no-run-tests --haddock --no-haddock-deps
        else
          stack $STACK_ARGS build --test --no-run-tests --bench --no-run-benchmarks --haddock --no-haddock-deps
        fi

    - name: Test
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-19" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack $STACK_ARGS test :spec :legacy-test --coverage --haddock --no-haddock-deps
          stack $STACK_ARGS hpc report --all
          curl -L https://github.com/rubik/stack-hpc-coveralls/releases/download/v0.0.7.0/shc-Linux-X64.tar.bz2 | tar xj shc
          ./shc --repo-token="$COVERALLS_TOKEN" --partial-coverage --fetch-coverage combined custom
        else
          stack $STACK_ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
        fi

  i386:
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:bionic
    steps:
    - name: Install
      run: |
        apt-get update -y
        apt-get install -y autoconf build-essential zlib1g-dev libgmp-dev curl libncurses5 libtinfo5 libncurses5-dev libtinfo-dev wget
        wget https://get-ghcup.haskell.org -O ghcup.sh -t 10 --retry-connrefused
        chmod a+x ghcup.sh
        BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_INSTALL_NO_STACK=1 ./ghcup.sh
    - uses: actions/checkout@v1
    - name: Test
      run: |
        source ~/.ghcup/env
        cabal update
        cabal test

  # We use github.com/haskell self-hosted runners for ARM testing.
  arm:
    runs-on: [self-hosted, Linux, ARM64]
    strategy:
      fail-fast: true
      matrix:
        arch: [arm32v7, arm64v8]
    steps:
      - uses: docker://hasufell/arm64v8-ubuntu-haskell:focal
        name: Cleanup
        with:
          args: "find . -mindepth 1 -maxdepth 1 -exec rm -rf -- {} +"

      - name: Checkout code
        uses: actions/checkout@v4

      - if: matrix.arch == 'arm32v7'
        uses: docker://hasufell/arm32v7-ubuntu-haskell:focal
        name: Run build (arm32v7 linux)
        with:
          args: sh -c "cabal update && cabal test"

      - if: matrix.arch == 'arm64v8'
        uses: docker://hasufell/arm64v8-ubuntu-haskell:focal
        name: Run build (arm64v8 linux)
        with:
          args: sh -c "cabal update && cabal test"

  # Emulation on s390x platform is incredibly slow and memory demanding.
  # It seems that any executable with GHC RTS takes at least 7-8 Gb of RAM, so we can
  # run `cabal` or `ghc` on their own, but cannot run them both at the same time, striking
  # out `cabal test`. Instead we rely on system packages and invoke `ghc --make` manually,
  # and even so `ghc -O` is prohibitively expensive.
  s390x:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: uraimo/run-on-arch-action@v2.8.1
      timeout-minutes: 60
      with:
        arch: s390x
        distro: ubuntu_rolling
        githubToken: ${{ github.token }}
        install: |
          apt-get update -y
          apt-get install -y git ghc libghc-tasty-smallcheck-dev libghc-tasty-hunit-dev libghc-splitmix-dev curl
        run: |
          git clone https://github.com/Bodigrim/data-array-byte
          cp -r data-array-byte/Data .
          ghc --version
          ghc --make -isrc:test-legacy -o legacy test-legacy/Legacy.hs
          ./legacy
          ghc --make -isrc:test -o spec test/Spec.hs
          ./spec
