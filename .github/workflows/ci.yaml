name: random-CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ master ]

defaults: { run: { shell: bash } }

# Cancel running actions when a new action on the same PR is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-cabal:
    name: CI-cabal
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "7.10.3" }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "8.0.2"  }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "8.2.2"  }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "8.4.4"  }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "8.6.5"  }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "8.8.4"  }
          # - { cabal: "3.6", os: ubuntu-latest,  ghc: "8.10.7" }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "9.0.2"  }
          - { cabal: "3.6", os: ubuntu-latest,  ghc: "9.2.2"  }
          # MacOS
          - { cabal: "3.6", os: macOS-latest,  ghc: "7.10.3" }
          - { cabal: "3.6", os: macOS-latest,  ghc: "8.0.2"  }
          - { cabal: "3.6", os: macOS-latest,  ghc: "8.2.2"  }
          - { cabal: "3.6", os: macOS-latest,  ghc: "8.4.4"  }
          - { cabal: "3.6", os: macOS-latest,  ghc: "8.6.5"  }
          - { cabal: "3.6", os: macOS-latest,  ghc: "8.8.4"  }
          # - { cabal: "3.6", os: macOS-latest,  ghc: "8.10.7" }
          - { cabal: "3.6", os: macOS-latest,  ghc: "9.0.2"  }
          - { cabal: "3.6", os: macOS-latest,  ghc: "9.2.2"  }
          # Windows
          - { cabal: "3.6", os: windows-latest,  ghc: "7.10.3" }
          - { cabal: "3.6", os: windows-latest,  ghc: "8.0.2"  }
          - { cabal: "3.6", os: windows-latest,  ghc: "8.2.2"  }
          - { cabal: "3.6", os: windows-latest,  ghc: "8.4.4"  }
          - { cabal: "3.6", os: windows-latest,  ghc: "8.6.5"  }
          - { cabal: "3.6", os: windows-latest,  ghc: "8.8.4"  }
          # - { cabal: "3.6", os: windows-latest,  ghc: "8.10.7" }
          - { cabal: "3.6", os: windows-latest,  ghc: "9.0.2"  }
          - { cabal: "3.6", os: windows-latest,  ghc: "9.2.2"  }
    steps:
    - uses: actions/checkout@v3

    - uses: haskell-actions/setup@v2
      id: setup-haskell-cabal
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
    - name: Update cabal package database
      run: cabal update
    - uses: actions/cache@v2
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}
    - name: Build and test
      run: |
        cabal sdist -z -o .
        cabal get random-*.tar.gz
        cd random-*/
        if [ ${{matrix.ghc}} = 7.10.3 ]; then
          EXTRA_FLAGS=--ghc-option="-optl-no-pie"
        fi
        echo $EXTRA_FLAGS
        cabal $EXTRA_FLAGS configure --haddock-all --enable-tests --enable-benchmarks --benchmark-option=-l
        cabal $EXTRA_FLAGS build all --write-ghc-environment-files=always
  build-stack:
    name: CI-stack
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        resolver: [nightly, lts-21, lts-20, lts-19, lts-18, lts-16, lts-14, lts-12, lts-11]
        include:
          - resolver: lts-11
            ghc: '8.2.2'
            stack-yaml: stack-old.yaml
          - resolver: lts-12
            ghc: '8.4.4'
            stack-yaml: stack-old.yaml
          - resolver: lts-14
            ghc: '8.6.5'
            stack-yaml: stack-old.yaml
          - resolver: lts-16
            ghc: '8.8.4'
            stack-yaml: stack-old.yaml
          - resolver: lts-18
            ghc: '8.10.7'
            stack-yaml: stack.yaml
          - resolver: lts-19
            ghc: '9.0.2'
            stack-yaml: stack-coveralls.yaml
          - resolver: lts-20
            ghc: '9.2.8'
            stack-yaml: stack.yaml
          - resolver: lts-21
            ghc: '9.4.7'
            stack-yaml: stack.yaml
          - resolver: nightly
            stack-yaml: stack.yaml
          # Latest stable for MacOS: ghc-8.8.4
          - resolver: lts-16
            os: macos-latest
            ghc: '8.8.4'
            stack-yaml: stack-old.yaml
          # Latest stable for Windows: ghc-8.6.4
          - resolver: lts-14
            os: windows-latest
            ghc: '8.6.5'
            stack-yaml: stack-old.yaml
    env:
      STACK_YAML: '${{ matrix.stack-yaml }}'
      STACK_ARGS: '--resolver ${{ matrix.resolver }} --system-ghc'
      cache-version: v4 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2

    - uses: haskell-actions/setup@v2
      id: setup-haskell-stack
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        enable-stack: true
        stack-version: 'latest'
        cabal-version: '3.6'

    - name: Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.stack
          .stack-work
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    # Executable files somehow become incompatible after restoring on MacOS from a
    # previous build, so it needs to be cleaned up. This is very inconvenient and will
    # need to be fixed.
    - name: MacOS workaround for failure due to setup-exe-cache
      if: steps.cache.outputs.cache-hit == 'true' && matrix.os == 'macos-latest'
      run: |
        rm -r ~/.stack/setup-exe-cache
        rm -r .stack-work
    - name: Windows Cache
      id: cache-windows
      uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: |
          C:\\Users\\RUNNER~1\\AppData\\Local\\Programs\\stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}

    - name: Reset modtime
      run: |
        set -ex
        curl -sSL https://raw.githubusercontent.com/lehins/utils/master/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        runhaskell -- git-modtime.hs -f .stack-work/tree-contents.txt

    - name: Build
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-19" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          # Inspection tests aren't compatible with coverage
          stack $STACK_ARGS build :spec :legacy-test --coverage --test --no-run-tests --haddock --no-haddock-deps
        else
          stack $STACK_ARGS build --test --no-run-tests --bench --no-run-benchmarks --haddock --no-haddock-deps
        fi

    - name: Test
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-19" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack $STACK_ARGS test :spec :legacy-test --coverage --haddock --no-haddock-deps
          stack $STACK_ARGS hpc report --all
          curl -L https://github.com/rubik/stack-hpc-coveralls/releases/download/v0.0.7.0/shc-Linux-X64.tar.bz2 | tar xj shc
          ./shc --repo-token="$COVERALLS_TOKEN" --partial-coverage --fetch-coverage combined custom
        else
          stack $STACK_ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
        fi
